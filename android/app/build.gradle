plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"

}

apply from: '../versioning.gradle'

def localProperties = new Properties()
def localPropertiesFile = rootProject.file("local.properties")
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader("UTF-8") { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty("flutter.versionCode")
if (flutterVersionCode == null) {
    flutterVersionCode = "1"
}

def flutterVersionName = localProperties.getProperty("flutter.versionName")
if (flutterVersionName == null) {
    flutterVersionName = "1.0"
}

android {
    namespace = "com.smart.cctv"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    defaultConfig {
        applicationId = "com.smart.cctv"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0.0"
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            storeFile file('../keystore/upload-keystore.jks')
            storePassword file('../keystore/keystore.password').text.trim()
            keyPassword file('../keystore/keystore.password').text.trim()
            keyAlias 'hansin_release'
        }
    }

    buildTypes {
        debug {
            buildConfigField "String", "SERVER_URL", localProperties['url_default']
            buildConfigField "String", "SERVER_CCTV", localProperties['cctv_default']
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
        }

        ul {
            buildConfigField "String", "SERVER_URL", localProperties['url_ul']
            buildConfigField "String", "SERVER_CCTV", localProperties['cctv_ul']
            signingConfig signingConfigs.release
            applicationIdSuffix ".ul"
        }

        ty {
            buildConfigField "String", "SERVER_URL", localProperties['url_ty']
            buildConfigField "String", "SERVER_CCTV", localProperties['cctv_ty']
            signingConfig signingConfigs.release
            applicationIdSuffix ".ty"
        }

    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = getApkName(variant.buildType.name)
        }
    }
}

flutter {
    source = "../.."
}
